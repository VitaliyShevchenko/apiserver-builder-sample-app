// Code generated by lister-gen. DO NOT EDIT.

package v1

import (
	v1 "gopath/src/pet-project/pkg/apis/petproject/v1"

	"k8s.io/apimachinery/pkg/api/errors"
	"k8s.io/apimachinery/pkg/labels"
	"k8s.io/client-go/tools/cache"
)

// ActorLister helps list Actors.
type ActorLister interface {
	// List lists all Actors in the indexer.
	List(selector labels.Selector) (ret []*v1.Actor, err error)
	// Actors returns an object that can list and get Actors.
	Actors(namespace string) ActorNamespaceLister
	ActorListerExpansion
}

// actorLister implements the ActorLister interface.
type actorLister struct {
	indexer cache.Indexer
}

// NewActorLister returns a new ActorLister.
func NewActorLister(indexer cache.Indexer) ActorLister {
	return &actorLister{indexer: indexer}
}

// List lists all Actors in the indexer.
func (s *actorLister) List(selector labels.Selector) (ret []*v1.Actor, err error) {
	err = cache.ListAll(s.indexer, selector, func(m interface{}) {
		ret = append(ret, m.(*v1.Actor))
	})
	return ret, err
}

// Actors returns an object that can list and get Actors.
func (s *actorLister) Actors(namespace string) ActorNamespaceLister {
	return actorNamespaceLister{indexer: s.indexer, namespace: namespace}
}

// ActorNamespaceLister helps list and get Actors.
type ActorNamespaceLister interface {
	// List lists all Actors in the indexer for a given namespace.
	List(selector labels.Selector) (ret []*v1.Actor, err error)
	// Get retrieves the Actor from the indexer for a given namespace and name.
	Get(name string) (*v1.Actor, error)
	ActorNamespaceListerExpansion
}

// actorNamespaceLister implements the ActorNamespaceLister
// interface.
type actorNamespaceLister struct {
	indexer   cache.Indexer
	namespace string
}

// List lists all Actors in the indexer for a given namespace.
func (s actorNamespaceLister) List(selector labels.Selector) (ret []*v1.Actor, err error) {
	err = cache.ListAllByNamespace(s.indexer, s.namespace, selector, func(m interface{}) {
		ret = append(ret, m.(*v1.Actor))
	})
	return ret, err
}

// Get retrieves the Actor from the indexer for a given namespace and name.
func (s actorNamespaceLister) Get(name string) (*v1.Actor, error) {
	obj, exists, err := s.indexer.GetByKey(s.namespace + "/" + name)
	if err != nil {
		return nil, err
	}
	if !exists {
		return nil, errors.NewNotFound(v1.Resource("actor"), name)
	}
	return obj.(*v1.Actor), nil
}
