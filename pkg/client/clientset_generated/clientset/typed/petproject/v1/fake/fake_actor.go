// Code generated by client-gen. DO NOT EDIT.

package fake

import (
	petprojectv1 "gopath/src/pet-project/pkg/apis/petproject/v1"

	v1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	labels "k8s.io/apimachinery/pkg/labels"
	schema "k8s.io/apimachinery/pkg/runtime/schema"
	types "k8s.io/apimachinery/pkg/types"
	watch "k8s.io/apimachinery/pkg/watch"
	testing "k8s.io/client-go/testing"
)

// FakeActors implements ActorInterface
type FakeActors struct {
	Fake *FakePetprojectV1
	ns   string
}

var actorsResource = schema.GroupVersionResource{Group: "petproject.shevchenkovitalii.com", Version: "v1", Resource: "actors"}

var actorsKind = schema.GroupVersionKind{Group: "petproject.shevchenkovitalii.com", Version: "v1", Kind: "Actor"}

// Get takes name of the actor, and returns the corresponding actor object, and an error if there is any.
func (c *FakeActors) Get(name string, options v1.GetOptions) (result *petprojectv1.Actor, err error) {
	obj, err := c.Fake.
		Invokes(testing.NewGetAction(actorsResource, c.ns, name), &petprojectv1.Actor{})

	if obj == nil {
		return nil, err
	}
	return obj.(*petprojectv1.Actor), err
}

// List takes label and field selectors, and returns the list of Actors that match those selectors.
func (c *FakeActors) List(opts v1.ListOptions) (result *petprojectv1.ActorList, err error) {
	obj, err := c.Fake.
		Invokes(testing.NewListAction(actorsResource, actorsKind, c.ns, opts), &petprojectv1.ActorList{})

	if obj == nil {
		return nil, err
	}

	label, _, _ := testing.ExtractFromListOptions(opts)
	if label == nil {
		label = labels.Everything()
	}
	list := &petprojectv1.ActorList{ListMeta: obj.(*petprojectv1.ActorList).ListMeta}
	for _, item := range obj.(*petprojectv1.ActorList).Items {
		if label.Matches(labels.Set(item.Labels)) {
			list.Items = append(list.Items, item)
		}
	}
	return list, err
}

// Watch returns a watch.Interface that watches the requested actors.
func (c *FakeActors) Watch(opts v1.ListOptions) (watch.Interface, error) {
	return c.Fake.
		InvokesWatch(testing.NewWatchAction(actorsResource, c.ns, opts))

}

// Create takes the representation of a actor and creates it.  Returns the server's representation of the actor, and an error, if there is any.
func (c *FakeActors) Create(actor *petprojectv1.Actor) (result *petprojectv1.Actor, err error) {
	obj, err := c.Fake.
		Invokes(testing.NewCreateAction(actorsResource, c.ns, actor), &petprojectv1.Actor{})

	if obj == nil {
		return nil, err
	}
	return obj.(*petprojectv1.Actor), err
}

// Update takes the representation of a actor and updates it. Returns the server's representation of the actor, and an error, if there is any.
func (c *FakeActors) Update(actor *petprojectv1.Actor) (result *petprojectv1.Actor, err error) {
	obj, err := c.Fake.
		Invokes(testing.NewUpdateAction(actorsResource, c.ns, actor), &petprojectv1.Actor{})

	if obj == nil {
		return nil, err
	}
	return obj.(*petprojectv1.Actor), err
}

// UpdateStatus was generated because the type contains a Status member.
// Add a +genclient:noStatus comment above the type to avoid generating UpdateStatus().
func (c *FakeActors) UpdateStatus(actor *petprojectv1.Actor) (*petprojectv1.Actor, error) {
	obj, err := c.Fake.
		Invokes(testing.NewUpdateSubresourceAction(actorsResource, "status", c.ns, actor), &petprojectv1.Actor{})

	if obj == nil {
		return nil, err
	}
	return obj.(*petprojectv1.Actor), err
}

// Delete takes name of the actor and deletes it. Returns an error if one occurs.
func (c *FakeActors) Delete(name string, options *v1.DeleteOptions) error {
	_, err := c.Fake.
		Invokes(testing.NewDeleteAction(actorsResource, c.ns, name), &petprojectv1.Actor{})

	return err
}

// DeleteCollection deletes a collection of objects.
func (c *FakeActors) DeleteCollection(options *v1.DeleteOptions, listOptions v1.ListOptions) error {
	action := testing.NewDeleteCollectionAction(actorsResource, c.ns, listOptions)

	_, err := c.Fake.Invokes(action, &petprojectv1.ActorList{})
	return err
}

// Patch applies the patch and returns the patched actor.
func (c *FakeActors) Patch(name string, pt types.PatchType, data []byte, subresources ...string) (result *petprojectv1.Actor, err error) {
	obj, err := c.Fake.
		Invokes(testing.NewPatchSubresourceAction(actorsResource, c.ns, name, pt, data, subresources...), &petprojectv1.Actor{})

	if obj == nil {
		return nil, err
	}
	return obj.(*petprojectv1.Actor), err
}
