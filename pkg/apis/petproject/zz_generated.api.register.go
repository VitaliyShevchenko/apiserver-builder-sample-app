// Code generated by apiregister-gen. DO NOT EDIT.

package petproject

import (
	"context"
	"fmt"

	"k8s.io/apimachinery/pkg/apis/meta/internalversion"
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime"
	"k8s.io/apimachinery/pkg/runtime/schema"
	"k8s.io/apiserver/pkg/registry/rest"
	"sigs.k8s.io/apiserver-builder-alpha/pkg/builders"
)

var (
	PetprojectActorStorage = builders.NewApiResource( // Resource status endpoint
		InternalActor,
		func() runtime.Object { return &Actor{} },     // Register versioned resource
		func() runtime.Object { return &ActorList{} }, // Register versioned resource list
		&ActorStrategy{builders.StorageStrategySingleton},
	)
	InternalActor = builders.NewInternalResource(
		"actors",
		"Actor",
		func() runtime.Object { return &Actor{} },
		func() runtime.Object { return &ActorList{} },
	)
	InternalActorStatus = builders.NewInternalResourceStatus(
		"actors",
		"ActorStatus",
		func() runtime.Object { return &Actor{} },
		func() runtime.Object { return &ActorList{} },
	)
	// Registered resources and subresources
	ApiVersion = builders.NewApiGroup("petproject.shevchenkovitalii.com").WithKinds(
		InternalActor,
		InternalActorStatus,
	)

	// Required by code generated by go2idl
	AddToScheme = (&runtime.SchemeBuilder{
		ApiVersion.SchemeBuilder.AddToScheme,
		RegisterDefaults,
	}).AddToScheme
	SchemeBuilder      = ApiVersion.SchemeBuilder
	localSchemeBuilder = &SchemeBuilder
	SchemeGroupVersion = ApiVersion.GroupVersion
)

// Required by code generated by go2idl
// Kind takes an unqualified kind and returns a Group qualified GroupKind
func Kind(kind string) schema.GroupKind {
	return SchemeGroupVersion.WithKind(kind).GroupKind()
}

// Required by code generated by go2idl
// Resource takes an unqualified resource and returns a Group qualified GroupResource
func Resource(resource string) schema.GroupResource {
	return SchemeGroupVersion.WithResource(resource).GroupResource()
}

// +genclient
// +genclient
// +k8s:deepcopy-gen:interfaces=k8s.io/apimachinery/pkg/runtime.Object

type Actor struct {
	metav1.TypeMeta
	metav1.ObjectMeta
	Spec   ActorSpec
	Status ActorStatus
}

type ActorSpec struct {
	Name    string
	Surname string
}

type ActorStatus struct {
}

//
// Actor Functions and Structs
//
// +k8s:deepcopy-gen=false
type ActorStrategy struct {
	builders.DefaultStorageStrategy
}

// +k8s:deepcopy-gen=false
type ActorStatusStrategy struct {
	builders.DefaultStatusStorageStrategy
}

// +k8s:deepcopy-gen:interfaces=k8s.io/apimachinery/pkg/runtime.Object

type ActorList struct {
	metav1.TypeMeta
	metav1.ListMeta
	Items []Actor
}

func (Actor) NewStatus() interface{} {
	return ActorStatus{}
}

func (pc *Actor) GetStatus() interface{} {
	return pc.Status
}

func (pc *Actor) SetStatus(s interface{}) {
	pc.Status = s.(ActorStatus)
}

func (pc *Actor) GetSpec() interface{} {
	return pc.Spec
}

func (pc *Actor) SetSpec(s interface{}) {
	pc.Spec = s.(ActorSpec)
}

func (pc *Actor) GetObjectMeta() *metav1.ObjectMeta {
	return &pc.ObjectMeta
}

func (pc *Actor) SetGeneration(generation int64) {
	pc.ObjectMeta.Generation = generation
}

func (pc Actor) GetGeneration() int64 {
	return pc.ObjectMeta.Generation
}

// Registry is an interface for things that know how to store Actor.
// +k8s:deepcopy-gen=false
type ActorRegistry interface {
	ListActors(ctx context.Context, options *internalversion.ListOptions) (*ActorList, error)
	GetActor(ctx context.Context, id string, options *metav1.GetOptions) (*Actor, error)
	CreateActor(ctx context.Context, id *Actor) (*Actor, error)
	UpdateActor(ctx context.Context, id *Actor) (*Actor, error)
	DeleteActor(ctx context.Context, id string) (bool, error)
}

// NewRegistry returns a new Registry interface for the given Storage. Any mismatched types will panic.
func NewActorRegistry(sp builders.StandardStorageProvider) ActorRegistry {
	return &storageActor{sp}
}

// Implement Registry
// storage puts strong typing around storage calls
// +k8s:deepcopy-gen=false
type storageActor struct {
	builders.StandardStorageProvider
}

func (s *storageActor) ListActors(ctx context.Context, options *internalversion.ListOptions) (*ActorList, error) {
	if options != nil && options.FieldSelector != nil && !options.FieldSelector.Empty() {
		return nil, fmt.Errorf("field selector not supported yet")
	}
	st := s.GetStandardStorage()
	obj, err := st.List(ctx, options)
	if err != nil {
		return nil, err
	}
	return obj.(*ActorList), err
}

func (s *storageActor) GetActor(ctx context.Context, id string, options *metav1.GetOptions) (*Actor, error) {
	st := s.GetStandardStorage()
	obj, err := st.Get(ctx, id, options)
	if err != nil {
		return nil, err
	}
	return obj.(*Actor), nil
}

func (s *storageActor) CreateActor(ctx context.Context, object *Actor) (*Actor, error) {
	st := s.GetStandardStorage()
	obj, err := st.Create(ctx, object, nil, &metav1.CreateOptions{})
	if err != nil {
		return nil, err
	}
	return obj.(*Actor), nil
}

func (s *storageActor) UpdateActor(ctx context.Context, object *Actor) (*Actor, error) {
	st := s.GetStandardStorage()
	obj, _, err := st.Update(ctx, object.Name, rest.DefaultUpdatedObjectInfo(object), nil, nil, false, &metav1.UpdateOptions{})
	if err != nil {
		return nil, err
	}
	return obj.(*Actor), nil
}

func (s *storageActor) DeleteActor(ctx context.Context, id string) (bool, error) {
	st := s.GetStandardStorage()
	_, sync, err := st.Delete(ctx, id, nil, &metav1.DeleteOptions{})
	return sync, err
}
